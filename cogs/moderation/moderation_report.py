import discord
from discord import app_commands, ui
from discord.ext import commands
from datetime import datetime
from .moderation_warns import WarnModal
from .moderation_mute import MuteDurationView
from .moderation_del import ConfirmActionModal

class ReportActionView(ui.View):
    def __init__(self, target: discord.Member, reporter: discord.Member, reason: str):
        super().__init__(timeout=None)
        self.target = target
        self.reporter = reporter
        self.reason = reason

    @ui.button(label="–ù–∞–∫–∞–∑–∞—Ç—å", style=discord.ButtonStyle.red, emoji="üî®")
    async def punish(self, interaction: discord.Interaction, button: ui.Button):
        view = ui.View()
        view.add_item(PunishmentSelect(self.target, self.reason, self))
        await interaction.response.send_message(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –Ω–∞–∫–∞–∑–∞–Ω–∏—è:",
            view=view,
            ephemeral=True
        )

    @ui.button(label="–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å", style=discord.ButtonStyle.gray, emoji="‚ùå")
    async def ignore(self, interaction: discord.Interaction, button: ui.Button):
        await interaction.message.edit(view=None)
        await interaction.response.send_message(
            "–ñ–∞–ª–æ–±–∞ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∞.",
            ephemeral=True
        )

class PunishmentSelect(ui.Select):
    def __init__(self, target: discord.Member, reason: str, parent_view: ReportActionView):
        options = [
            discord.SelectOption(label="–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", value="warn", emoji="‚ö†Ô∏è"),
            discord.SelectOption(label="–ú—É—Ç", value="mute", emoji="üîá"),
            discord.SelectOption(label="–ö–∏–∫", value="kick", emoji="üë¢"),
            discord.SelectOption(label="–ë–∞–Ω", value="ban", emoji="üî®")
        ]
        super().__init__(placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –Ω–∞–∫–∞–∑–∞–Ω–∏—è...", options=options)
        self.target = target
        self.reason = reason
        self.parent_view = parent_view

    async def callback(self, interaction: discord.Interaction):
        cog = interaction.client.get_cog("ModerationReports")
        if self.values[0] == "warn":
            await interaction.response.send_modal(WarnModal(self.target, self.reason, cog, self.parent_view))
        elif self.values[0] == "mute":
            await interaction.response.send_message(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º—É—Ç–∞:",
                view=MuteDurationView(self.target, self.reason, cog, self.parent_view),
                ephemeral=True
            )
        else:
            action = "–∫–∏–∫" if self.values[0] == "kick" else "–±–∞–Ω"
            await interaction.response.send_modal(
                ConfirmActionModal(self.target, self.reason, action, cog, self.parent_view)
            )

class ModerationReports(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    async def log_report_action(self, message: discord.Message, action: str, moderator: discord.Member):
        base_cog = self.bot.get_cog("ModerationBase")
        if not base_cog or not base_cog.data["log_channels"]["reports"]:
            return
            
        channel = self.bot.get_channel(base_cog.data["log_channels"]["reports"])
        if not channel:
            return
            
        embed = message.embeds[0]
        embed.title = f"–ñ–∞–ª–æ–±–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞: {action}"
        embed.color = discord.Color.green()
        embed.add_field(name="–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä", value=moderator.mention, inline=False)
        
        await message.edit(embed=embed, view=None)

    @app_commands.command(name="—Ä–µ–ø–æ—Ä—Ç", description="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∂–∞–ª–æ–±—É –Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞")
    @app_commands.describe(—É—á–∞—Å—Ç–Ω–∏–∫="–£—á–∞—Å—Ç–Ω–∏–∫ –¥–ª—è –∂–∞–ª–æ–±—ã", –ø—Ä–∏—á–∏–Ω–∞="–ü—Ä–∏—á–∏–Ω–∞ –∂–∞–ª–æ–±—ã")
    async def report(self, interaction: discord.Interaction, —É—á–∞—Å—Ç–Ω–∏–∫: discord.Member, –ø—Ä–∏—á–∏–Ω–∞: str):
        base_cog = self.bot.get_cog("ModerationBase")
        if not base_cog or not base_cog.data["log_channels"]["reports"]:
            return await interaction.response.send_message(
                "–°–∏—Å—Ç–µ–º–∞ –∂–∞–ª–æ–± –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
                ephemeral=True
            )
            
        channel = self.bot.get_channel(base_cog.data["log_channels"]["reports"])
        if not channel:
            return await interaction.response.send_message(
                "–û—à–∏–±–∫–∞: –∫–∞–Ω–∞–ª –¥–ª—è –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                ephemeral=True
            )
            
        embed = discord.Embed(
            title=f"–ñ–∞–ª–æ–±–∞ –Ω–∞ {—É—á–∞—Å—Ç–Ω–∏–∫.display_name} ({—É—á–∞—Å—Ç–Ω–∏–∫.mention})",
            color=discord.Color.red(),
            timestamp=discord.utils.utcnow()
        )
        embed.add_field(name="–û—Ç", value=interaction.user.mention, inline=True)
        embed.add_field(name="–ü—Ä–∏—á–∏–Ω–∞", value=–ø—Ä–∏—á–∏–Ω–∞, inline=True)
        embed.add_field(name="ID", value=—É—á–∞—Å—Ç–Ω–∏–∫.id, inline=True)
        embed.set_footer(text=f"–°–µ–≥–æ–¥–Ω—è, –≤ {datetime.now().strftime('%H:%M')}")
        
        await channel.send(
            embed=embed,
            view=ReportActionView(—É—á–∞—Å—Ç–Ω–∏–∫, interaction.user, –ø—Ä–∏—á–∏–Ω–∞)
        )
        await interaction.response.send_message(
            "‚úÖ –í–∞—à–∞ –∂–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º.",
            ephemeral=True
        )

async def setup(bot):
    await bot.add_cog(ModerationReports(bot))