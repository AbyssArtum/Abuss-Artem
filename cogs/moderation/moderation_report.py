import discord
from discord import app_commands, ui
from discord.ext import commands
import sqlite3
from typing import Optional

class ReportDB:
    def __init__(self, db_path="data/reports.db"):
        self.conn = sqlite3.connect(db_path)
        self._init_db()

    def _init_db(self):
        cursor = self.conn.cursor()
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS reports (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                guild_id BIGINT NOT NULL,
                target_id BIGINT NOT NULL,
                reporter_id BIGINT NOT NULL,
                reason TEXT NOT NULL,
                status TEXT DEFAULT 'pending',
                moderator_id BIGINT,
                action_taken TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        self.conn.commit()

    def add_report(self, guild_id, target_id, reporter_id, reason):
        cursor = self.conn.cursor()
        cursor.execute("""
            INSERT INTO reports (guild_id, target_id, reporter_id, reason)
            VALUES (?, ?, ?, ?)
        """, (guild_id, target_id, reporter_id, reason))
        self.conn.commit()
        return cursor.lastrowid

    def update_report(self, report_id, status, moderator_id, action_taken):
        cursor = self.conn.cursor()
        cursor.execute("""
            UPDATE reports 
            SET status = ?, moderator_id = ?, action_taken = ?
            WHERE id = ?
        """, (status, moderator_id, action_taken, report_id))
        self.conn.commit()

class ReportActionView(ui.View):
    def __init__(self, target: discord.Member, reporter: discord.Member, reason: str, report_id: int):
        super().__init__(timeout=None)
        self.target = target
        self.reporter = reporter
        self.reason = reason
        self.report_id = report_id

    @ui.button(label="–ù–∞–∫–∞–∑–∞—Ç—å", style=discord.ButtonStyle.red, emoji="üî®")
    async def punish(self, interaction: discord.Interaction, button: ui.Button):
        view = PunishmentSelectView(self.target, self.reason, self.report_id)
        await interaction.response.send_message(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –Ω–∞–∫–∞–∑–∞–Ω–∏—è:",
            view=view,
            ephemeral=True
        )

    @ui.button(label="–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å", style=discord.ButtonStyle.gray, emoji="‚ùå")
    async def ignore(self, interaction: discord.Interaction, button: ui.Button):
        report_cog = interaction.client.get_cog("ModerationReports")
        if report_cog:
            report_cog.db.update_report(
                self.report_id,
                status="rejected",
                moderator_id=interaction.user.id,
                action_taken="ignored"
            )
        await interaction.message.edit(view=None)
        await interaction.response.send_message("–ñ–∞–ª–æ–±–∞ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∞.", ephemeral=True)

class PunishmentSelectView(ui.View):
    def __init__(self, target: discord.Member, reason: str, report_id: int):
        super().__init__()
        self.target = target
        self.reason = reason
        self.report_id = report_id

    @ui.select(
        placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∫–∞–∑–∞–Ω–∏–µ",
        options=[
            discord.SelectOption(label="–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", value="warn"),
            discord.SelectOption(label="–ú—É—Ç", value="mute"),
            discord.SelectOption(label="–ö–∏–∫", value="kick"),
            discord.SelectOption(label="–ë–∞–Ω", value="ban")
        ]
    )
    async def select_punishment(self, interaction: discord.Interaction, select: ui.Select):
        report_cog = interaction.client.get_cog("ModerationReports")
        if not report_cog:
            return await interaction.response.send_message("–û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã!", ephemeral=True)

        action = select.values[0]
        report_cog.db.update_report(
            self.report_id,
            status="approved",
            moderator_id=interaction.user.id,
            action_taken=action
        )

        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–∞–∫–∞–∑–∞–Ω–∏—è
        # –ù–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ –≤—ã–∑–æ–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–º–∞–Ω–¥ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        
        await interaction.message.edit(view=None)
        await interaction.response.send_message(
            f"–ù–∞–∫–∞–∑–∞–Ω–∏–µ '{action}' –ø—Ä–∏–º–µ–Ω–µ–Ω–æ –∫ {self.target.mention}",
            ephemeral=True
        )

class ModerationReports(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.db = ReportDB()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î

    async def get_log_channel(self, guild_id: int) -> Optional[discord.TextChannel]:
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ª–æ–≥–æ–≤
        # –ù–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ –¥—Ä—É–≥–æ–π —Å–∏—Å—Ç–µ–º—ã –∏–ª–∏ –∫–æ–Ω—Ñ–∏–≥–∞
        return None  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é

    @app_commands.command(name="—Ä–µ–ø–æ—Ä—Ç", description="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∂–∞–ª–æ–±—É –Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞")
    @app_commands.describe(—É—á–∞—Å—Ç–Ω–∏–∫="–£—á–∞—Å—Ç–Ω–∏–∫ –¥–ª—è –∂–∞–ª–æ–±—ã", –ø—Ä–∏—á–∏–Ω–∞="–ü—Ä–∏—á–∏–Ω–∞ –∂–∞–ª–æ–±—ã")
    async def report_command(self, interaction: discord.Interaction, 
                           —É—á–∞—Å—Ç–Ω–∏–∫: discord.Member, 
                           –ø—Ä–∏—á–∏–Ω–∞: str):
        if —É—á–∞—Å—Ç–Ω–∏–∫.bot:
            return await interaction.response.send_message(
                "–ù–µ–ª—å–∑—è –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è –Ω–∞ –±–æ—Ç–∞!", 
                ephemeral=True
            )

        if —É—á–∞—Å—Ç–Ω–∏–∫.id == interaction.user.id:
            return await interaction.response.send_message(
                "–ù–µ–ª—å–∑—è –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Å–∞–º–æ–≥–æ —Å–µ–±—è!",
                ephemeral=True
            )

        log_channel = await self.get_log_channel(interaction.guild.id)
        if not log_channel:
            return await interaction.response.send_message(
                "‚ùå –°–∏—Å—Ç–µ–º–∞ –∂–∞–ª–æ–± –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
                ephemeral=True
            )

        try:
            report_id = self.db.add_report(
                guild_id=interaction.guild.id,
                target_id=—É—á–∞—Å—Ç–Ω–∏–∫.id,
                reporter_id=interaction.user.id,
                reason=–ø—Ä–∏—á–∏–Ω–∞
            )

            embed = discord.Embed(
                title=f"–ñ–∞–ª–æ–±–∞ #{report_id} –Ω–∞ {—É—á–∞—Å—Ç–Ω–∏–∫.display_name}",
                color=discord.Color.red(),
                description=f"**–ü—Ä–∏—á–∏–Ω–∞:** {–ø—Ä–∏—á–∏–Ω–∞}"
            )
            embed.add_field(name="–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å", value=interaction.user.mention)
            embed.add_field(name="–£—á–∞—Å—Ç–Ω–∏–∫", value=—É—á–∞—Å—Ç–Ω–∏–∫.mention)
            embed.set_footer(text=f"ID: {—É—á–∞—Å—Ç–Ω–∏–∫.id}")

            await log_channel.send(
                embed=embed,
                view=ReportActionView(—É—á–∞—Å—Ç–Ω–∏–∫, interaction.user, –ø—Ä–∏—á–∏–Ω–∞, report_id)
            )

            await interaction.response.send_message(
                "‚úÖ –í–∞—à–∞ –∂–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º.",
                ephemeral=True
            )

        except Exception as e:
            await interaction.response.send_message(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}",
                ephemeral=True
            )

async def setup(bot):
    await bot.add_cog(ModerationReports(bot))