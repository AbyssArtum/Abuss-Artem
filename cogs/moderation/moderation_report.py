import discord
from discord import app_commands, ui
from discord.ext import commands
from datetime import datetime
import sqlite3  # –∏–ª–∏ asyncpg –¥–ª—è PostgreSQL

class ReportDB:
    def __init__(self, db_path="data/reports.db"):
        self.conn = sqlite3.connect(db_path)
        self._init_db()

    def _init_db(self):
        cursor = self.conn.cursor()
        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∂–∞–ª–æ–±
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS reports (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                guild_id BIGINT NOT NULL,
                target_id BIGINT NOT NULL,
                reporter_id BIGINT NOT NULL,
                reason TEXT NOT NULL,
                status TEXT DEFAULT 'pending',  -- pending/approved/rejected
                moderator_id BIGINT,
                action_taken TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Å–≤—è–∑–∏ —Å –¥—Ä—É–≥–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏ (–∞–Ω–∫–µ—Ç—ã, —É—Ä–æ–≤–µ–Ω—å)
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS user_profiles (
                user_id BIGINT PRIMARY KEY,
                guild_id BIGINT NOT NULL,
                warnings INTEGER DEFAULT 0,
                level INTEGER DEFAULT 1,
                xp INTEGER DEFAULT 0,
                voice_xp INTEGER DEFAULT 0
            )
        """)
        self.conn.commit()

    def add_report(self, guild_id, target_id, reporter_id, reason):
        cursor = self.conn.cursor()
        cursor.execute("""
            INSERT INTO reports (guild_id, target_id, reporter_id, reason)
            VALUES (?, ?, ?, ?)
        """, (guild_id, target_id, reporter_id, reason))
        self.conn.commit()
        return cursor.lastrowid

    def update_report(self, report_id, status, moderator_id, action_taken):
        cursor = self.conn.cursor()
        cursor.execute("""
            UPDATE reports 
            SET status = ?, moderator_id = ?, action_taken = ?
            WHERE id = ?
        """, (status, moderator_id, action_taken, report_id))
        self.conn.commit()

class ReportActionView(ui.View):
    def __init__(self, target: discord.Member, reporter: discord.Member, reason: str, report_id: int):
        super().__init__(timeout=None)
        self.target = target
        self.reporter = reporter
        self.reason = reason
        self.report_id = report_id

    @ui.button(label="–ù–∞–∫–∞–∑–∞—Ç—å", style=discord.ButtonStyle.red, emoji="üî®")
    async def punish(self, interaction: discord.Interaction, button: ui.Button):
        view = ui.View()
        view.add_item(PunishmentSelect(self.target, self.reason, self))
        await interaction.response.send_message(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –Ω–∞–∫–∞–∑–∞–Ω–∏—è:",
            view=view,
            ephemeral=True
        )

    @ui.button(label="–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å", style=discord.ButtonStyle.gray, emoji="‚ùå")
    async def ignore(self, interaction: discord.Interaction, button: ui.Button):
        report_cog = interaction.client.get_cog("ModerationReports")
        if report_cog:
            await report_cog.db.update_report(
                self.report_id,
                status="rejected",
                moderator_id=interaction.user.id,
                action_taken="ignored"
            )
        await interaction.message.edit(view=None)
        await interaction.response.send_message("–ñ–∞–ª–æ–±–∞ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∞.", ephemeral=True)

class ModerationReports(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.db = sqlite3.connect('data/main.db')

    async def report(self, interaction: discord.Interaction, —É—á–∞—Å—Ç–Ω–∏–∫: discord.Member, –ø—Ä–∏—á–∏–Ω–∞: str):
        cursor = self.db.cursor()
        cursor.execute("""
            INSERT INTO reports (target_id, reporter_id, guild_id, reason)
            VALUES (?, ?, ?, ?)
        """, (—É—á–∞—Å—Ç–Ω–∏–∫.id, interaction.user.id, interaction.guild.id, –ø—Ä–∏—á–∏–Ω–∞))
        self.db.commit()

    async def get_log_channel(self, guild_id: int) -> discord.TextChannel | None:
        moderation_cog = self.bot.get_cog("ModerationCog")
        if not moderation_cog:
            return None
        channel_id = await moderation_cog.get_log_channel(guild_id, "reports")
        return self.bot.get_channel(channel_id) if channel_id else None

    @app_commands.command(name="—Ä–µ–ø–æ—Ä—Ç", description="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∂–∞–ª–æ–±—É –Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞")
    @app_commands.describe(—É—á–∞—Å—Ç–Ω–∏–∫="–£—á–∞—Å—Ç–Ω–∏–∫ –¥–ª—è –∂–∞–ª–æ–±—ã", –ø—Ä–∏—á–∏–Ω–∞="–ü—Ä–∏—á–∏–Ω–∞ –∂–∞–ª–æ–±—ã")
    async def report(self, interaction: discord.Interaction, —É—á–∞—Å—Ç–Ω–∏–∫: discord.Member, –ø—Ä–∏—á–∏–Ω–∞: str):
        log_channel = await self.get_log_channel(interaction.guild.id)
        if not log_channel:
            return await interaction.response.send_message(
                "‚ùå –°–∏—Å—Ç–µ–º–∞ –∂–∞–ª–æ–± –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
                ephemeral=True
            )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∂–∞–ª–æ–±—É –≤ –±–∞–∑—É
        report_id = self.db.add_report(
            guild_id=interaction.guild.id,
            target_id=—É—á–∞—Å—Ç–Ω–∏–∫.id,
            reporter_id=interaction.user.id,
            reason=–ø—Ä–∏—á–∏–Ω–∞
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∂–∞–ª–æ–±—É –≤ –∫–∞–Ω–∞–ª
        embed = discord.Embed(
            title=f"–ñ–∞–ª–æ–±–∞ –Ω–∞ {—É—á–∞—Å—Ç–Ω–∏–∫.display_name}",
            color=discord.Color.red(),
            description=f"**–ü—Ä–∏—á–∏–Ω–∞:** {–ø—Ä–∏—á–∏–Ω–∞}"
        )
        embed.add_field(name="–û—Ç", value=interaction.user.mention, inline=True)
        embed.add_field(name="ID —É—á–∞—Å—Ç–Ω–∏–∫–∞", value=—É—á–∞—Å—Ç–Ω–∏–∫.id, inline=True)
        embed.set_footer(text=f"ID –∂–∞–ª–æ–±—ã: {report_id}")

        await log_channel.send(
            embed=embed,
            view=ReportActionView(—É—á–∞—Å—Ç–Ω–∏–∫, interaction.user, –ø—Ä–∏—á–∏–Ω–∞, report_id)
        )
        await interaction.response.send_message(
            "‚úÖ –í–∞—à–∞ –∂–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º.",
            ephemeral=True
        )

async def setup(bot):
    await bot.add_cog(ModerationReports(bot))