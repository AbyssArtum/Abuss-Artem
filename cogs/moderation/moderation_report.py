import discord
from discord import app_commands, ui
from discord.ext import commands
from datetime import datetime
from typing import Optional
from utils.user_data import get_user_data, save_user_data
import json
from pathlib import Path

class ReportSystem:
    def __init__(self):
        self.reports_file = Path("data/reports.json")
        self._init_storage()

    def _init_storage(self):
        if not self.reports_file.exists():
            with open(self.reports_file, "w", encoding="utf-8") as f:
                json.dump({"reports": {}, "last_id": 0}, f)

    def _load_data(self):
        with open(self.reports_file, "r", encoding="utf-8") as f:
            return json.load(f)

    def _save_data(self, data):
        with open(self.reports_file, "w", encoding="utf-8") as f:
            json.dump(data, f, indent=4, ensure_ascii=False)

    def add_report(self, guild_id: int, target_id: int, reporter_id: int, reason: str) -> int:
        data = self._load_data()
        report_id = data["last_id"] + 1
        
        report = {
            "id": report_id,
            "guild_id": guild_id,
            "target_id": target_id,
            "reporter_id": reporter_id,
            "reason": reason,
            "status": "pending",
            "moderator_id": None,
            "action_taken": None,
            "created_at": datetime.now().isoformat()
        }
        
        data["reports"][str(report_id)] = report
        data["last_id"] = report_id
        self._save_data(data)
        
        return report_id

    def update_report(self, report_id: int, status: str, moderator_id: int, action_taken: str):
        data = self._load_data()
        if str(report_id) in data["reports"]:
            report = data["reports"][str(report_id)]
            report["status"] = status
            report["moderator_id"] = moderator_id
            report["action_taken"] = action_taken
            self._save_data(data)
            return True
        return False

class ReportActionView(ui.View):
    def __init__(self, target: discord.Member, reporter: discord.Member, reason: str, report_id: int):
        super().__init__(timeout=None)
        self.target = target
        self.reporter = reporter
        self.reason = reason
        self.report_id = report_id

    @ui.button(label="–ù–∞–∫–∞–∑–∞—Ç—å", style=discord.ButtonStyle.red, emoji="üî®")
    async def punish(self, interaction: discord.Interaction, button: ui.Button):
        view = PunishmentSelectView(self.target, self.reason, self.report_id)
        await interaction.response.send_message(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –Ω–∞–∫–∞–∑–∞–Ω–∏—è:",
            view=view,
            ephemeral=True
        )

    @ui.button(label="–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å", style=discord.ButtonStyle.gray, emoji="‚ùå")
    async def ignore(self, interaction: discord.Interaction, button: ui.Button):
        report_cog = interaction.client.get_cog("ModerationReports")
        if report_cog:
            report_cog.report_system.update_report(
                self.report_id,
                status="rejected",
                moderator_id=interaction.user.id,
                action_taken="ignored"
            )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        target_data = get_user_data(self.target.id)
        if "moderation" not in target_data:
            target_data["moderation"] = {"reports": []}
        
        target_data["moderation"]["reports"].append({
            "report_id": self.report_id,
            "status": "rejected",
            "moderator_id": interaction.user.id,
            "action": "ignored",
            "timestamp": datetime.now().isoformat()
        })
        save_user_data(self.target.id, target_data)
        
        await interaction.message.edit(view=None)
        await interaction.response.send_message("–ñ–∞–ª–æ–±–∞ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∞.", ephemeral=True)

class PunishmentSelectView(ui.View):
    def __init__(self, target: discord.Member, reason: str, report_id: int):
        super().__init__()
        self.target = target
        self.reason = reason
        self.report_id = report_id

    @ui.select(
        placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∫–∞–∑–∞–Ω–∏–µ",
        options=[
            discord.SelectOption(label="–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", value="warn"),
            discord.SelectOption(label="–ú—É—Ç", value="mute"),
            discord.SelectOption(label="–ö–∏–∫", value="kick"),
            discord.SelectOption(label="–ë–∞–Ω", value="ban")
        ]
    )
    async def select_punishment(self, interaction: discord.Interaction, select: ui.Select):
        report_cog = interaction.client.get_cog("ModerationReports")
        if not report_cog:
            return await interaction.response.send_message("–û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã!", ephemeral=True)

        action = select.values[0]
        report_cog.report_system.update_report(
            self.report_id,
            status="approved",
            moderator_id=interaction.user.id,
            action_taken=action
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        target_data = get_user_data(self.target.id)
        if "moderation" not in target_data:
            target_data["moderation"] = {"reports": []}
        
        target_data["moderation"]["reports"].append({
            "report_id": self.report_id,
            "status": "approved",
            "moderator_id": interaction.user.id,
            "action": action,
            "timestamp": datetime.now().isoformat()
        })
        save_user_data(self.target.id, target_data)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞–∫–∞–∑–∞–Ω–∏–µ
        if action == "warn":
            warn_cog = interaction.client.get_cog("ModerationWarns")
            if warn_cog:
                await warn_cog.warn(interaction, self.target, self.reason)
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—Ä—É–≥–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π (–º—É—Ç, –∫–∏–∫, –±–∞–Ω)
        
        await interaction.message.edit(view=None)
        await interaction.response.send_message(
            f"–ù–∞–∫–∞–∑–∞–Ω–∏–µ '{action}' –ø—Ä–∏–º–µ–Ω–µ–Ω–æ –∫ {self.target.mention}",
            ephemeral=True
        )

class ModerationReports(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.report_system = ReportSystem()
        self.reports_log_channel = None  # –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ

    async def setup_log_channel(self, guild_id: int):
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –ª–æ–≥–æ–≤
        # –ù–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ –∏–ª–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        return None

    @commands.Cog.listener()
    async def on_ready(self):
        # –ü—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–≥–∞ –∏—â–µ–º –∫–∞–Ω–∞–ª –¥–ª—è –ª–æ–≥–æ–≤
        for guild in self.bot.guilds:
            self.reports_log_channel = await self.setup_log_channel(guild.id)

    @app_commands.command(name="–∂–∞–ª–æ–±–∞", description="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∂–∞–ª–æ–±—É –Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞")
    @app_commands.describe(—É—á–∞—Å—Ç–Ω–∏–∫="–£—á–∞—Å—Ç–Ω–∏–∫ –¥–ª—è –∂–∞–ª–æ–±—ã", –ø—Ä–∏—á–∏–Ω–∞="–ü—Ä–∏—á–∏–Ω–∞ –∂–∞–ª–æ–±—ã")
    async def report_command(self, interaction: discord.Interaction, 
                           —É—á–∞—Å—Ç–Ω–∏–∫: discord.Member, 
                           –ø—Ä–∏—á–∏–Ω–∞: str):
        if —É—á–∞—Å—Ç–Ω–∏–∫.bot:
            return await interaction.response.send_message(
                "–ù–µ–ª—å–∑—è –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è –Ω–∞ –±–æ—Ç–∞!", 
                ephemeral=True
            )

        if —É—á–∞—Å—Ç–Ω–∏–∫.id == interaction.user.id:
            return await interaction.response.send_message(
                "–ù–µ–ª—å–∑—è –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Å–∞–º–æ–≥–æ —Å–µ–±—è!",
                ephemeral=True
            )

        if not self.reports_log_channel:
            self.reports_log_channel = await self.setup_log_channel(interaction.guild.id)
            if not self.reports_log_channel:
                return await interaction.response.send_message(
                    "‚ùå –°–∏—Å—Ç–µ–º–∞ –∂–∞–ª–æ–± –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
                    ephemeral=True
                )

        try:
            report_id = self.report_system.add_report(
                guild_id=interaction.guild.id,
                target_id=—É—á–∞—Å—Ç–Ω–∏–∫.id,
                reporter_id=interaction.user.id,
                reason=–ø—Ä–∏—á–∏–Ω–∞
            )

            embed = discord.Embed(
                title=f"–ñ–∞–ª–æ–±–∞ #{report_id} –Ω–∞ {—É—á–∞—Å—Ç–Ω–∏–∫.display_name}",
                color=discord.Color.red(),
                description=f"**–ü—Ä–∏—á–∏–Ω–∞:** {–ø—Ä–∏—á–∏–Ω–∞}"
            )
            embed.add_field(name="–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å", value=interaction.user.mention)
            embed.add_field(name="–£—á–∞—Å—Ç–Ω–∏–∫", value=—É—á–∞—Å—Ç–Ω–∏–∫.mention)
            embed.set_footer(text=f"ID: {—É—á–∞—Å—Ç–Ω–∏–∫.id}")

            await self.reports_log_channel.send(
                embed=embed,
                view=ReportActionView(—É—á–∞—Å—Ç–Ω–∏–∫, interaction.user, –ø—Ä–∏—á–∏–Ω–∞, report_id)
            )

            await interaction.response.send_message(
                "‚úÖ –í–∞—à–∞ –∂–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º.",
                ephemeral=True
            )

        except Exception as e:
            await interaction.response.send_message(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}",
                ephemeral=True
            )

    @app_commands.command(name="–∂–∞–ª–æ–±—ã", description="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∂–∞–ª–æ–±—ã –Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞")
    @app_commands.describe(—É—á–∞—Å—Ç–Ω–∏–∫="–£—á–∞—Å—Ç–Ω–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
    async def view_reports(self, interaction: discord.Interaction, —É—á–∞—Å—Ç–Ω–∏–∫: discord.Member):
        user_data = get_user_data(—É—á–∞—Å—Ç–Ω–∏–∫.id)
        
        if "moderation" not in user_data or not user_data["moderation"].get("reports"):
            return await interaction.response.send_message(
                f"–ù–∞ {—É—á–∞—Å—Ç–Ω–∏–∫.mention} –Ω–µ—Ç –∂–∞–ª–æ–±.",
                ephemeral=True
            )
            
        reports = user_data["moderation"]["reports"]
        approved = sum(1 for r in reports if r["status"] == "approved")
        rejected = sum(1 for r in reports if r["status"] == "rejected")
        pending = sum(1 for r in reports if r["status"] == "pending")
        
        embed = discord.Embed(
            title=f"–ñ–∞–ª–æ–±—ã –Ω–∞ {—É—á–∞—Å—Ç–Ω–∏–∫.display_name}",
            color=discord.Color.orange()
        )
        embed.add_field(name="–í—Å–µ–≥–æ –∂–∞–ª–æ–±", value=len(reports), inline=False)
        embed.add_field(name="–û–¥–æ–±—Ä–µ–Ω–æ", value=approved, inline=True)
        embed.add_field(name="–û—Ç–∫–ª–æ–Ω–µ–Ω–æ", value=rejected, inline=True)
        embed.add_field(name="–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏", value=pending, inline=True)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∂–∞–ª–æ–±
        recent_reports = sorted(reports, key=lambda x: x["timestamp"], reverse=True)[:5]
        for i, report in enumerate(recent_reports, 1):
            moderator = await self.bot.fetch_user(report["moderator_id"]) if report["moderator_id"] else "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"
            embed.add_field(
                name=f"–ñ–∞–ª–æ–±–∞ #{report.get('report_id', '?')}",
                value=f"**–°—Ç–∞—Ç—É—Å:** {report['status']}\n"
                      f"**–î–µ–π—Å—Ç–≤–∏–µ:** {report.get('action', '–Ω–µ—Ç')}\n"
                      f"**–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä:** {moderator.mention if isinstance(moderator, discord.User) else moderator}",
                inline=False
            )
            
        await interaction.response.send_message(embed=embed, ephemeral=True)

async def setup(bot):
    await bot.add_cog(ModerationReports(bot))